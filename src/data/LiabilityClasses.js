/**
 * LiabilityClasses - –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —Ç–∏–ø–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 */
class LiabilityClasses {
    constructor() {
        this.liabilityTypes = {
            mortgage: {
                name: '–ò–ø–æ—Ç–µ–∫–∞',
                icon: 'üè†',
                color: '#dc2626',
                description: '–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                category: 'secured',
                defaultRate: 8.5,
                defaultTerm: 20,
                examples: ['–ò–ø–æ—Ç–µ–∫–∞ –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É', '–ò–ø–æ—Ç–µ–∫–∞ –Ω–∞ –¥–æ–º', '–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ']
            },
            consumer: {
                name: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç',
                icon: 'üí≥',
                color: '#ea580c',
                description: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç –±–µ–∑ –∑–∞–ª–æ–≥–∞',
                category: 'unsecured',
                defaultRate: 15.0,
                defaultTerm: 5,
                examples: ['–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏', '–¶–µ–ª–µ–≤–æ–π –∫—Ä–µ–¥–∏—Ç', '–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ']
            },
            auto: {
                name: '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç',
                icon: 'üöó',
                color: '#0891b2',
                description: '–ö—Ä–µ–¥–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
                category: 'secured',
                defaultRate: 12.0,
                defaultTerm: 7,
                examples: ['–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–ü–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–ú–æ—Ç–æ—Ü–∏–∫–ª']
            },
            business: {
                name: '–ë–∏–∑–Ω–µ—Å-–∫—Ä–µ–¥–∏—Ç',
                icon: 'üíº',
                color: '#7c3aed',
                description: '–ö—Ä–µ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞',
                category: 'business',
                defaultRate: 18.0,
                defaultTerm: 3,
                examples: ['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –ª–∏–Ω–∏—è', '–û–±–æ—Ä–æ—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç']
            }
        };

        this.riskCategories = {
            secured: {
                name: '–û–±–µ—Å–ø–µ—á–µ–Ω–Ω—ã–µ',
                description: '–ö—Ä–µ–¥–∏—Ç—ã –ø–æ–¥ –∑–∞–ª–æ–≥ –∏–º—É—â–µ—Å—Ç–≤–∞',
                riskLevel: 'low'
            },
            unsecured: {
                name: '–ù–µ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω—ã–µ',
                description: '–ö—Ä–µ–¥–∏—Ç—ã –±–µ–∑ –∑–∞–ª–æ–≥–∞',
                riskLevel: 'medium'
            },
            business: {
                name: '–ë–∏–∑–Ω–µ—Å-–∫—Ä–µ–¥–∏—Ç—ã',
                description: '–ö—Ä–µ–¥–∏—Ç—ã –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                riskLevel: 'high'
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     * @param {string} liabilityType - –¢–∏–ø –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ
     */
    getLiabilityInfo(liabilityType) {
        return this.liabilityTypes[liabilityType] || null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
     * @returns {Object} –í—Å–µ —Ç–∏–ø—ã –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
     */
    getAllLiabilityTypes() {
        return this.liabilityTypes;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     * @param {string} liabilityType - –¢–∏–ø –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     * @param {number} principal - –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
     * @param {number} rate - –ì–æ–¥–æ–≤–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)
     * @param {number} termYears - –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –≥–æ–¥–∞—Ö
     * @returns {Object} –û–±—ä–µ–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     */
    createDefaultLiability(liabilityType, principal = 0, rate = null, termYears = null) {
        const liabilityInfo = this.getLiabilityInfo(liabilityType);
        if (!liabilityInfo) {
            throw new Error(`Unknown liability type: ${liabilityType}`);
        }

        const finalRate = rate !== null ? rate : liabilityInfo.defaultRate;
        const finalTerm = termYears !== null ? termYears : liabilityInfo.defaultTerm;
        const monthlyPayment = this.calculateMonthlyPayment(principal, finalRate, finalTerm);

        return {
            id: this.generateLiabilityId(liabilityType),
            type: liabilityType,
            name: `${liabilityInfo.name}`,
            principal: principal,
            currentBalance: principal,
            rate: finalRate,
            termYears: finalTerm,
            monthlyPayment: monthlyPayment,
            createdAt: new Date().toISOString()
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂)
     * @param {number} principal - –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
     * @param {number} annualRate - –ì–æ–¥–æ–≤–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)
     * @param {number} termYears - –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –≥–æ–¥–∞—Ö
     * @returns {number} –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
     */
    calculateMonthlyPayment(principal, annualRate, termYears) {
        if (principal <= 0 || annualRate <= 0 || termYears <= 0) {
            return 0;
        }

        const monthlyRate = annualRate / 100 / 12;
        const numPayments = termYears * 12;

        // –§–æ—Ä–º—É–ª–∞ –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        const monthlyPayment = principal *
            (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) /
            (Math.pow(1 + monthlyRate, numPayments) - 1);

        return Math.round(monthlyPayment * 100) / 100;
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞ —á–µ—Ä–µ–∑ N –ª–µ—Ç
     * @param {Object} liability - –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
     * @param {number} years - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
     * @returns {number} –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞
     */
    calculateRemainingBalance(liability, years) {
        if (years <= 0) {
            return liability.principal;
        }

        if (years >= liability.termYears) {
            return 0;
        }

        const monthlyRate = liability.rate / 100 / 12;
        const totalPayments = liability.termYears * 12;
        const paymentsMade = years * 12;
        const remainingPayments = totalPayments - paymentsMade;

        // –§–æ—Ä–º—É–ª–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞
        const remainingBalance = liability.principal *
            (Math.pow(1 + monthlyRate, totalPayments) - Math.pow(1 + monthlyRate, paymentsMade)) /
            (Math.pow(1 + monthlyRate, totalPayments) - 1);

        return Math.max(0, Math.round(remainingBalance * 100) / 100);
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –≤—ã–ø–ª–∞—Ç –ø–æ –∫—Ä–µ–¥–∏—Ç—É
     * @param {Object} liability - –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö
     */
    calculateTotalPayments(liability) {
        const totalPayments = liability.monthlyPayment * liability.termYears * 12;
        const totalInterest = totalPayments - liability.principal;

        return {
            totalPayments: Math.round(totalPayments * 100) / 100,
            totalInterest: Math.round(totalInterest * 100) / 100,
            interestRate: Math.round((totalInterest / liability.principal) * 100 * 100) / 100
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     * @param {string} liabilityType - –¢–∏–ø –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateLiabilityId(liabilityType) {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substr(2, 5);
        return `${liabilityType}_${timestamp}_${random}`;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–µ–¥–∏—Ç–∞
     * @param {number} principal - –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞
     * @param {number} rate - –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
     * @param {number} termYears - –°—Ä–æ–∫ –≤ –≥–æ–¥–∞—Ö
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateLoanParameters(principal, rate, termYears) {
        const errors = [];

        if (!principal || principal <= 0) {
            errors.push('–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
        }

        if (!rate || rate <= 0 || rate > 100) {
            errors.push('–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%');
        }

        if (!termYears || termYears <= 0 || termYears > 50) {
            errors.push('–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 –ª–µ—Ç');
        }

        return {
            isValid: errors.length === 0,
            errors,
            message: errors.length === 0 ? '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã' : errors.join('; ')
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π (–ø–µ—Ä–≤—ã–µ 12 –º–µ—Å—è—Ü–µ–≤)
     * @param {Object} liability - –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
     * @returns {Array} –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
     */
    getPaymentSchedule(liability, months = 12) {
        const schedule = [];
        const monthlyRate = liability.rate / 100 / 12;
        let remainingBalance = liability.principal;

        for (let month = 1; month <= Math.min(months, liability.termYears * 12); month++) {
            const interestPayment = remainingBalance * monthlyRate;
            const principalPayment = liability.monthlyPayment - interestPayment;
            remainingBalance -= principalPayment;

            schedule.push({
                month,
                payment: Math.round(liability.monthlyPayment * 100) / 100,
                principal: Math.round(principalPayment * 100) / 100,
                interest: Math.round(interestPayment * 100) / 100,
                remainingBalance: Math.round(Math.max(0, remainingBalance) * 100) / 100
            });
        }

        return schedule;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.liabilityClasses = new LiabilityClasses();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.LiabilityClasses = LiabilityClasses;