/**
 * AssetClasses - –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
 */
class AssetClasses {
    constructor() {
        this.assetTypes = {
            stocks: {
                name: '–§–æ–Ω–¥—ã –∞–∫—Ü–∏–π',
                icon: 'üìà',
                color: '#059669',
                description: '–ò–Ω–¥–µ–∫—Å–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ–Ω–¥—ã –∞–∫—Ü–∏–π',
                riskLevel: 'high',
                liquidity: 'high',
                inflationAdjustment: {
                    pessimistic: -1,
                    base: 5,
                    optimistic: 10
                },
                examples: ['ETF –Ω–∞ S&P 500', '–§–æ–Ω–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π', '–ú–∏—Ä–æ–≤—ã–µ –∞–∫—Ü–∏–∏']
            },
            bonds: {
                name: '–§–æ–Ω–¥—ã –æ–±–ª–∏–≥–∞—Ü–∏–π',
                icon: 'üìÑ',
                color: '#2563eb',
                description: '–§–æ–Ω–¥—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π',
                riskLevel: 'medium',
                liquidity: 'medium',
                inflationAdjustment: {
                    pessimistic: -2,
                    base: 1,
                    optimistic: 5
                },
                examples: ['–§–æ–Ω–¥ –û–§–ó', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏', '–ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏']
            },
            cash: {
                name: '–§–æ–Ω–¥—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞',
                icon: 'üí∞',
                color: '#d97706',
                description: '–î–µ–ø–æ–∑–∏—Ç—ã –∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–µ–Ω–µ–∂–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞',
                riskLevel: 'low',
                liquidity: 'high',
                inflationAdjustment: {
                    pessimistic: -1,
                    base: 0,
                    optimistic: 1
                },
                examples: ['–°—Ä–æ—á–Ω—ã–µ –≤–∫–ª–∞–¥—ã', '–ú–ú–§', '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –û–§–ó']
            },
            realty: {
                name: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                icon: 'üè†',
                color: '#7c3aed',
                description: '–ü—Ä—è–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                riskLevel: 'medium',
                liquidity: 'low',
                inflationAdjustment: {
                    pessimistic: -4,
                    base: 0,
                    optimistic: 2
                },
                examples: ['–ñ–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'REITs']
            }
        };

        this.riskProfiles = {
            conservative: {
                name: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π',
                description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                allocation: {
                    cash: 50,
                    bonds: 40,
                    stocks: 10,
                    realty: 0
                },
                expectedReturn: 6,
                maxRisk: 15
            },
            balanced: {
                name: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
                description: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç',
                allocation: {
                    cash: 20,
                    bonds: 30,
                    stocks: 40,
                    realty: 10
                },
                expectedReturn: 9,
                maxRisk: 25
            },
            aggressive: {
                name: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π',
                description: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –≤—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                allocation: {
                    cash: 5,
                    bonds: 15,
                    stocks: 65,
                    realty: 15
                },
                expectedReturn: 13,
                maxRisk: 40
            }
        };

        this.correlations = {
            // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∞–∫—Ç–∏–≤–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            stocks: { stocks: 1.0, bonds: -0.2, cash: 0.1, realty: 0.3 },
            bonds: { stocks: -0.2, bonds: 1.0, cash: 0.4, realty: 0.1 },
            cash: { stocks: 0.1, bonds: 0.4, cash: 1.0, realty: 0.0 },
            realty: { stocks: 0.3, bonds: 0.1, cash: 0.0, realty: 1.0 }
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∞–∫—Ç–∏–≤–∞
     * @param {string} assetType - –¢–∏–ø –∞–∫—Ç–∏–≤–∞
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ
     */
    getAssetInfo(assetType) {
        return this.assetTypes[assetType] || null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–æ–≤
     * @returns {Object} –í—Å–µ —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–æ–≤
     */
    getAllAssetTypes() {
        return this.assetTypes;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞
     * @param {string} profileName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
     * @returns {Object} –ü—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞
     */
    getRiskProfile(profileName) {
        return this.riskProfiles[profileName] || null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ä–∏—Å–∫–∞
     * @returns {Object} –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ä–∏—Å–∫–∞
     */
    getAllRiskProfiles() {
        return this.riskProfiles;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     * @param {string} assetType - –¢–∏–ø –∞–∫—Ç–∏–≤–∞
     * @param {number} value - –°—Ç–æ–∏–º–æ—Å—Ç—å
     * @returns {Object} –û–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–∞
     */
    createDefaultAsset(assetType, value = 0) {
        const assetInfo = this.getAssetInfo(assetType);
        if (!assetInfo) {
            throw new Error(`Unknown asset type: ${assetType}`);
        }

        return {
            id: this.generateAssetId(assetType),
            type: assetType,
            name: `${assetInfo.name} –∞–∫—Ç–∏–≤`,
            value: value,
            createdAt: new Date().toISOString()
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –∞–∫—Ç–∏–≤–∞
     * @param {string} assetType - –¢–∏–ø –∞–∫—Ç–∏–≤–∞
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateAssetId(assetType) {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substr(2, 5);
        return `${assetType}_${timestamp}_${random}`;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∞–∫—Ç–∏–≤–æ–≤
     * @param {string} assetType1 - –ü–µ—Ä–≤—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–∞
     * @param {string} assetType2 - –í—Ç–æ—Ä–æ–π —Ç–∏–ø –∞–∫—Ç–∏–≤–∞
     * @returns {number} –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
     */
    getCorrelation(assetType1, assetType2) {
        return this.correlations[assetType1]?.[assetType2] || 0;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
     * @param {Object} allocation - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateAllocation(allocation) {
        const total = Object.values(allocation).reduce((sum, value) => sum + value, 0);
        const isValid = Math.abs(total - 100) < 0.01; // –î–æ–ø—É—Å–∫ –Ω–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ

        return {
            isValid,
            total,
            deviation: total - 100,
            message: isValid ? '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : `–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%, —Ç–µ–∫—É—â–∞—è: ${total.toFixed(1)}%`
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
     * @param {Object} currentAllocation - –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
     * @param {string} targetProfile - –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞
     * @returns {Object} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    getRebalanceRecommendations(currentAllocation, targetProfile) {
        const profile = this.getRiskProfile(targetProfile);
        if (!profile) {
            return { error: 'Unknown risk profile' };
        }

        const recommendations = [];
        const targetAllocation = profile.allocation;

        Object.entries(targetAllocation).forEach(([assetType, targetPercent]) => {
            const currentPercent = currentAllocation[assetType] || 0;
            const difference = targetPercent - currentPercent;

            if (Math.abs(difference) > 5) { // –ü–æ—Ä–æ–≥ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations.push({
                    assetType,
                    action: difference > 0 ? 'increase' : 'decrease',
                    currentPercent,
                    targetPercent,
                    difference: Math.abs(difference),
                    priority: this.calculateRebalancePriority(difference, assetType)
                });
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        recommendations.sort((a, b) => b.priority - a.priority);

        return {
            recommendations,
            targetProfile: profile,
            summary: this.generateRebalanceSummary(recommendations)
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
     * @param {number} difference - –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     * @param {string} assetType - –¢–∏–ø –∞–∫—Ç–∏–≤–∞
     * @returns {number} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –≤–∞–∂–Ω–µ–µ)
     */
    calculateRebalancePriority(difference, assetType) {
        const assetInfo = this.getAssetInfo(assetType);
        const riskMultiplier = {
            'high': 1.2,
            'medium': 1.0,
            'low': 0.8
        };

        return Math.abs(difference) * (riskMultiplier[assetInfo.riskLevel] || 1.0);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
     * @param {Array} recommendations - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     * @returns {string} –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
     */
    generateRebalanceSummary(recommendations) {
        if (recommendations.length === 0) {
            return '–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é';
        }

        const increases = recommendations.filter(r => r.action === 'increase');
        const decreases = recommendations.filter(r => r.action === 'decrease');

        let summary = '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ:\n';

        if (increases.length > 0) {
            summary += `–£–≤–µ–ª–∏—á–∏—Ç—å: ${increases.map(r => this.getAssetInfo(r.assetType).name).join(', ')}\n`;
        }

        if (decreases.length > 0) {
            summary += `–£–º–µ–Ω—å—à–∏—Ç—å: ${decreases.map(r => this.getAssetInfo(r.assetType).name).join(', ')}`;
        }

        return summary;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ API)
     * @param {string} assetType - –¢–∏–ø –∞–∫—Ç–∏–≤–∞
     * @param {string} period - –ü–µ—Ä–∏–æ–¥ (1y, 3y, 5y)
     * @returns {Object} –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
     */
    getHistoricalData(assetType, period = '1y') {
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        return {
            assetType,
            period,
            data: this.generateMockHistoricalData(assetType, period),
            lastUpdated: new Date().toISOString()
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    generateMockHistoricalData(assetType, period) {
        const assetInfo = this.getAssetInfo(assetType);
        const baseReturn = assetInfo.defaultReturn.base / 100;
        const volatility = {
            'high': 0.25,
            'medium': 0.15,
            'low': 0.05
        }[assetInfo.riskLevel];

        const periodDays = { '1y': 365, '3y': 1095, '5y': 1825 }[period] || 365;
        const data = [];

        let currentValue = 100; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        for (let i = 0; i < periodDays; i += 30) { // –ü–æ–º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const randomFactor = 1 + (Math.random() - 0.5) * volatility;
            const growthFactor = Math.pow(1 + baseReturn, 30/365);
            currentValue *= growthFactor * randomFactor;

            data.push({
                date: new Date(Date.now() - (periodDays - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                value: Math.round(currentValue * 100) / 100
            });
        }

        return data;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.assetClasses = new AssetClasses();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.AssetClasses = AssetClasses;