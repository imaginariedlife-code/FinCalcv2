/**
 * Formatters - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
class Formatters {
    constructor() {
        this.locale = 'ru-RU';
        this.currency = 'RUB';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @param {number} amount - –°—É–º–º–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    formatCurrency(amount, options = {}) {
        const defaultOptions = {
            style: 'currency',
            currency: this.currency,
            maximumFractionDigits: 0,
            ...options
        };

        try {
            return new Intl.NumberFormat(this.locale, defaultOptions).format(amount || 0);
        } catch (error) {
            return `${(amount || 0).toLocaleString()} ‚ÇΩ`;
        }
    }

    /**
     * –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @param {number} amount - –°—É–º–º–∞
     * @returns {string} –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    formatCompactCurrency(amount) {
        if (!amount) return '0‚ÇΩ';

        const absAmount = Math.abs(amount);

        if (absAmount >= 1000000000) {
            return `${(amount / 1000000000).toFixed(1)}B‚ÇΩ`;
        } else if (absAmount >= 1000000) {
            return `${(amount / 1000000).toFixed(1)}M‚ÇΩ`;
        } else if (absAmount >= 1000) {
            return `${(amount / 1000).toFixed(0)}K‚ÇΩ`;
        } else {
            return `${Math.round(amount)}‚ÇΩ`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
     * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    formatPercent(value, options = {}) {
        const defaultOptions = {
            style: 'percent',
            minimumFractionDigits: 1,
            maximumFractionDigits: 1,
            ...options
        };

        try {
            return new Intl.NumberFormat(this.locale, defaultOptions).format((value || 0) / 100);
        } catch (error) {
            return `${(value || 0).toFixed(1)}%`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
     * @param {number} value - –ß–∏—Å–ª–æ
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    formatNumber(value, options = {}) {
        const defaultOptions = {
            maximumFractionDigits: 2,
            ...options
        };

        try {
            return new Intl.NumberFormat(this.locale, defaultOptions).format(value || 0);
        } catch (error) {
            return (value || 0).toString();
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     * @param {Date|string} date - –î–∞—Ç–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    formatDate(date, options = {}) {
        const defaultOptions = {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            ...options
        };

        try {
            const dateObj = typeof date === 'string' ? new Date(date) : date;
            return new Intl.DateTimeFormat(this.locale, defaultOptions).format(dateObj);
        } catch (error) {
            return date?.toString() || '';
        }
    }

    /**
     * –ö–æ—Ä–æ—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     * @param {Date|string} date - –î–∞—Ç–∞
     * @returns {string} –ö–æ—Ä–æ—Ç–∫–∞—è –¥–∞—Ç–∞
     */
    formatShortDate(date) {
        return this.formatDate(date, {
            year: '2-digit',
            month: '2-digit',
            day: '2-digit'
        });
    }

    /**
     * –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     * @param {Date|string} date - –î–∞—Ç–∞
     * @returns {string} –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
     */
    formatRelativeTime(date) {
        try {
            const dateObj = typeof date === 'string' ? new Date(date) : date;
            const now = new Date();
            const diffMs = now - dateObj;
            const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

            if (diffDays === 0) return '—Å–µ–≥–æ–¥–Ω—è';
            if (diffDays === 1) return '–≤—á–µ—Ä–∞';
            if (diffDays < 7) return `${diffDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
            if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥`;
            if (diffDays < 365) return `${Math.floor(diffDays / 30)} –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥`;
            return `${Math.floor(diffDays / 365)} –ª–µ—Ç –Ω–∞–∑–∞–¥`;
        } catch (error) {
            return '';
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å –∑–Ω–∞–∫–æ–º –∏ —Ü–≤–µ—Ç–æ–º)
     * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     * @param {boolean} isPercent - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ –∫–ª–∞—Å—Å–æ–º
     */
    formatChange(value, isPercent = false) {
        const formattedValue = isPercent
            ? this.formatPercent(Math.abs(value))
            : this.formatCompactCurrency(Math.abs(value));

        const sign = value >= 0 ? '+' : '-';
        const className = value >= 0 ? 'text-success' : 'text-danger';

        return {
            text: `${sign}${formattedValue}`,
            className,
            isPositive: value >= 0
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
     */
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';

        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
     * @param {number} riskScore - –†–∏—Å–∫-—Å–∫–æ—Ä –æ—Ç 1 –¥–æ 10
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞—Å—Å–æ–º
     */
    formatRiskScore(riskScore) {
        const score = Math.round(riskScore || 0);

        let level, className;
        if (score <= 3) {
            level = '–ù–∏–∑–∫–∏–π';
            className = 'text-success';
        } else if (score <= 6) {
            level = '–°—Ä–µ–¥–Ω–∏–π';
            className = 'text-warning';
        } else {
            level = '–í—ã—Å–æ–∫–∏–π';
            className = 'text-danger';
        }

        return {
            text: `${score}/10 (${level})`,
            level,
            score,
            className
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
     * @param {number} years - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
     */
    formatTimePeriod(years) {
        if (years < 1) {
            const months = Math.round(years * 12);
            return `${months} –º–µ—Å.`;
        } else if (years === 1) {
            return '1 –≥–æ–¥';
        } else if (years < 5) {
            return `${years} –≥–æ–¥–∞`;
        } else {
            return `${years} –ª–µ—Ç`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
     * @param {Object} portfolio - –ü–æ—Ä—Ç—Ñ–µ–ª—å
     * @returns {Object} –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
     */
    formatPortfolioStatus(portfolio) {
        const assetCount = portfolio.assets?.length || 0;
        const totalValue = portfolio.totalValue || 0;

        if (assetCount === 0) {
            return {
                text: '–ü—É—Å—Ç–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                className: 'text-secondary',
                icon: 'üì≠'
            };
        } else if (totalValue === 0) {
            return {
                text: '–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                className: 'text-warning',
                icon: '‚ö†Ô∏è'
            };
        } else if (assetCount === 1) {
            return {
                text: '–ù–µ–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
                className: 'text-warning',
                icon: 'üìä'
            };
        } else {
            return {
                text: '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                className: 'text-success',
                icon: 'üíº'
            };
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
     * @param {string} str - –°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
     * @returns {number} –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
     */
    parseNumber(str) {
        if (typeof str === 'number') return str;
        if (!str) return 0;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–∫–∏ –∏ –º–∏–Ω—É—Å–∞
        const cleaned = str.toString().replace(/[^\d.-]/g, '');
        const parsed = parseFloat(cleaned);
        return isNaN(parsed) ? 0 : parsed;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
     * @param {string|number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @param {Object} constraints - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateNumber(value, constraints = {}) {
        const {
            min = -Infinity,
            max = Infinity,
            required = false,
            integer = false
        } = constraints;

        const parsed = this.parseNumber(value);

        if (required && (value === '' || value === null || value === undefined)) {
            return { isValid: false, error: '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' };
        }

        if (isNaN(parsed)) {
            return { isValid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ' };
        }

        if (integer && !Number.isInteger(parsed)) {
            return { isValid: false, error: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ' };
        }

        if (parsed < min) {
            return { isValid: false, error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${min}` };
        }

        if (parsed > max) {
            return { isValid: false, error: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${max}` };
        }

        return { isValid: true, value: parsed };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.formatters = new Formatters();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.Formatters = Formatters;