/**
 * Main Application - Alpine.js –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * –°–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –µ–¥–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
function finCalcApp() {
    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        isLoading: true,
        chartType: 'scenarios',
        activeTab: 'portfolio', // 'portfolio' | 'assets'
        selectedScenario: 'base', // 'pessimistic' | 'base' | 'optimistic'
        showAllMobileYears: false, // –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ª–µ—Ç
        showAddAsset: false,
        showAddLiability: false,
        showSettings: false,
        selectedAssetIndex: null,
        selectedLiabilityIndex: null,

        // –î–∞–Ω–Ω—ã–µ
        portfolio: {
            id: 'default',
            name: '–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
            assets: [],
            liabilities: [],
            totalValue: 0,
            totalLiabilities: 0,
            netWorth: 0
        },

        settings: {
            horizonYears: 10,
            inflation: 6.0,
            showRealValues: false
        },

        scenarios: {
            returnRates: {
                stocks: { pessimistic: 5, base: 12, optimistic: 20 },
                bonds: { pessimistic: 3, base: 8, optimistic: 12 },
                cash: { pessimistic: 4, base: 7, optimistic: 10 },
                realty: { pessimistic: 0, base: 5, optimistic: 12 }
            }
        },

        // –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        projections: {
            pessimistic: [],
            base: [],
            optimistic: [],
            future: { pessimistic: 0, base: 0, optimistic: 0 },
            growthRate: 0,
            riskScore: 1
        },

        // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞–º
        detailedProjections: {
            assets: {},
            liabilities: {
                pessimistic: [],
                base: [],
                optimistic: []
            }
        },

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        async init() {
            console.log('üöÄ Initializing FinCalc 2.0...');

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
                console.log('Checking method availability...');
                console.log('financialEngine.calculateDetailedProjections:', typeof financialEngine?.calculateDetailedProjections);
                console.log('chartManager.createAssetComparisonChart:', typeof chartManager?.createAssetComparisonChart);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                await this.loadData();

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                this.initializeCharts();

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                this.setupEventListeners();

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
                this.calculate();

                this.isLoading = false;
                console.log('‚úÖ FinCalc 2.0 initialized successfully');
            } catch (error) {
                console.error('‚ùå Failed to initialize FinCalc:', error);
                this.isLoading = false;
            }
        },

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        async loadData() {
            try {
                const data = await dataManager.loadData();

                this.portfolio = data.portfolio;
                this.settings = data.settings;
                this.scenarios = data.scenarios;

                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!this.portfolio.liabilities) {
                    this.portfolio.liabilities = [];
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                this.updatePortfolioValue();

                eventBus.emit('data:loaded', data);
            } catch (error) {
                console.error('Error loading data:', error);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            }
        },

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        async saveData() {
            try {
                const data = {
                    portfolio: this.portfolio,
                    settings: this.settings,
                    scenarios: this.scenarios
                };

                await dataManager.saveData(data);
                eventBus.emit('data:saved', data);
            } catch (error) {
                console.error('Error saving data:', error);
                eventBus.emit('data:error', { type: 'save', error });
            }
        },

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
        setupEventListeners() {
            // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            eventBus.on('portfolio:changed', () => {
                console.log('EventBus portfolio:changed triggered');
                this.calculate();
                this.saveData();
            });

            eventBus.on('settings:changed', () => {
                this.calculate();
                this.saveData();
            });

            eventBus.on('scenarios:changed', () => {
                this.calculate();
                this.saveData();
            });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            eventBus.on('projections:updated', (projections) => {
                this.updateCharts();
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            eventBus.on('data:error', (error) => {
                console.error('Data error:', error);
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            });
        },

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        initializeCharts() {
            this.$nextTick(() => {
                if (this.$refs.mainChart) {
                    this.updateCharts();
                }
            });
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        updateCharts() {
            console.log('updateCharts called');
            this.$nextTick(() => {
                console.log('updateCharts $nextTick executing');

                // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞
                let chartElement = this.$refs.mainChart;
                if (!chartElement) {
                    console.log('No chart ref found, trying querySelector');
                    chartElement = document.querySelector('canvas[x-ref="mainChart"]');
                }

                if (!chartElement) {
                    console.log('Chart element not found at all, waiting longer...');
                    setTimeout(() => {
                        this.updateCharts();
                    }, 100);
                    return;
                }

                console.log('Chart element found, updating...');
                try {
                    // Always show scenarios chart
                    chartManager.createScenariosChart(
                        chartElement,
                        this.projections,
                        this.settings
                    );
                    console.log('Chart updated successfully');
                } catch (error) {
                    console.error('Error updating charts:', error);
                }
            });
        },

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        calculate() {
            try {
                console.log('Starting calculations...');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                this.updatePortfolioValue();
                console.log('Portfolio updated:', {
                    assets: this.portfolio.totalValue,
                    liabilities: this.portfolio.totalLiabilities,
                    netWorth: this.portfolio.netWorth
                });

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏–∏
                console.log('Calculating projections with:', {
                    assets: this.portfolio.totalValue,
                    liabilities: this.portfolio.totalLiabilities,
                    liabilitiesCount: this.portfolio.liabilities?.length
                });

                this.projections = financialEngine.calculateProjections(
                    this.portfolio,
                    this.scenarios,
                    this.settings
                );

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
                const metrics = this.portfolio.liabilities && this.portfolio.liabilities.length > 0
                    ? financialEngine.calculateMetricsWithLiabilities(
                        this.portfolio,
                        this.projections,
                        this.settings
                    )
                    : financialEngine.calculateMetrics(
                        this.portfolio,
                        this.projections,
                        this.settings
                    );

                // –û–±–Ω–æ–≤–ª—è–µ–º –±—É–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                this.projections.future = metrics.futureValue || metrics.futureNetWorth;
                this.projections.growthRate = metrics.growthRate;
                this.projections.riskScore = metrics.riskScore || 1;

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                this.projections = { ...this.projections };

                console.log('Projections updated:', {
                    base: this.projections.base?.length,
                    pessimistic: this.projections.pessimistic?.length,
                    optimistic: this.projections.optimistic?.length
                });

                eventBus.emit('projections:updated', this.projections);
            } catch (error) {
                console.error('Error calculating projections:', error);
            }
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        updatePortfolioValue() {
            this.portfolio.totalValue = this.portfolio.assets.reduce(
                (sum, asset) => sum + (asset.value || 0), 0
            );

            this.portfolio.totalLiabilities = this.portfolio.liabilities.reduce(
                (sum, liability) => sum + (liability.currentBalance || 0), 0
            );

            this.portfolio.netWorth = this.portfolio.totalValue - this.portfolio.totalLiabilities;
        },

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
        addAsset(assetType) {
            try {
                const newAsset = assetClasses.createDefaultAsset(assetType, 0);
                this.portfolio.assets.push(newAsset);

                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
                if (this.activeTab === 'assets') {
                    this.calculateDetailedProjections();
                    this.updateAssetChart();
                }

                eventBus.emit('portfolio:changed', this.portfolio);

                // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                this.$nextTick(() => {
                    const inputs = document.querySelectorAll('.asset-value-input');
                    const lastInput = inputs[inputs.length - 1];
                    if (lastInput) lastInput.focus();
                });
            } catch (error) {
                console.error('Error adding asset:', error);
            }
        },

        // –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
        removeAsset(index) {
            if (index >= 0 && index < this.portfolio.assets.length) {
                this.portfolio.assets.splice(index, 1);

                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
                if (this.activeTab === 'assets') {
                    this.calculateDetailedProjections();
                    this.updateAssetChart();
                }

                eventBus.emit('portfolio:changed', this.portfolio);
            }
        },

        // === –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–°–¢–í ===

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        addLiability(liabilityType, principal, rate, termYears) {
            try {
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!this.portfolio.liabilities) {
                    this.portfolio.liabilities = [];
                }

                const newLiability = liabilityClasses.createDefaultLiability(liabilityType, principal, rate, termYears);
                this.portfolio.liabilities.push(newLiability);

                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
                this.updatePortfolioValue();
                this.calculate();

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                this.$nextTick(() => {
                    this.updateCharts();

                    // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
                    if (this.activeTab === 'assets') {
                        this.calculateDetailedProjections();
                        this.updateAssetChart();
                    }
                });

                this.saveData();
                eventBus.emit('portfolio:changed', this.portfolio);

                // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ —Å—É–º–º—ã –Ω–æ–≤–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
                this.$nextTick(() => {
                    const inputs = document.querySelectorAll('.liability-principal-input');
                    const lastInput = inputs[inputs.length - 1];
                    if (lastInput) lastInput.focus();
                });
            } catch (error) {
                console.error('Error adding liability:', error);
            }
        },

        // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        removeLiability(index) {
            console.log('Removing liability at index:', index, 'Current liabilities:', this.portfolio.liabilities.length);

            if (index >= 0 && index < this.portfolio.liabilities.length) {
                this.portfolio.liabilities.splice(index, 1);
                console.log('Liability removed, remaining:', this.portfolio.liabilities.length);

                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
                this.updatePortfolioValue();
                console.log('Portfolio value updated:', this.portfolio.netWorth);

                this.calculate();
                console.log('Calculations completed');

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                this.$nextTick(() => {
                    console.log('Updating charts...');
                    this.updateCharts();

                    // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
                    if (this.activeTab === 'assets') {
                        this.calculateDetailedProjections();
                        this.updateAssetChart();
                    }
                });

                this.saveData();
                eventBus.emit('portfolio:changed', this.portfolio);
            }
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        getLiabilityIcon(liabilityType) {
            const liabilityInfo = liabilityClasses.getLiabilityInfo(liabilityType);
            return liabilityInfo ? liabilityInfo.icon : 'üí≥';
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        getLiabilityTypeName(liabilityType) {
            const liabilityInfo = liabilityClasses.getLiabilityInfo(liabilityType);
            return liabilityInfo ? liabilityInfo.name : liabilityType;
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        getAllLiabilityTypes() {
            return liabilityClasses.getAllLiabilityTypes();
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ N –ª–µ—Ç
        getLiabilityBalance(liability, years = 0) {
            return liabilityClasses.calculateRemainingBalance(liability, years);
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è
        updateLiabilityValue(index, field, value) {
            if (this.portfolio.liabilities[index]) {
                this.portfolio.liabilities[index][field] = value;

                // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
                if (['principal', 'rate', 'termYears'].includes(field)) {
                    const liability = this.portfolio.liabilities[index];
                    liability.monthlyPayment = liabilityClasses.calculateMonthlyPayment(
                        liability.principal || 0,
                        liability.rate || 0,
                        liability.termYears || 1
                    );
                    liability.currentBalance = liability.principal || 0;
                }

                this.updatePortfolioValue();
                this.calculate();

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                this.$nextTick(() => {
                    this.updateCharts();

                    // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
                    if (this.activeTab === 'assets') {
                        this.calculateDetailedProjections();
                        this.updateAssetChart();
                    }
                });

                this.saveData();
            }
        },

        // === –ö–û–ù–ï–¶ –ú–ï–¢–û–î–û–í –î–õ–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–°–¢–í ===

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∞–∫—Ç–∏–≤–∞
        getAssetIcon(assetType) {
            const assetInfo = assetClasses.getAssetInfo(assetType);
            return assetInfo ? assetInfo.icon : 'üìä';
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞
        getAssetReturn(asset, scenario = 'base') {
            if (!asset.type) return 0;

            const assetInfo = assetClasses.getAssetInfo(asset.type);
            if (!assetInfo) return 0;

            const adjustment = assetInfo.inflationAdjustment[scenario] || 0;
            return this.settings.inflation + adjustment;
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–∞
        getAssetTypeName(assetType) {
            const assetInfo = assetClasses.getAssetInfo(assetType);
            return assetInfo ? assetInfo.name : assetType;
        },

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        formatCurrency(amount) {
            return formatters.formatCurrency(amount);
        },

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        formatPercent(value) {
            return formatters.formatPercent(value);
        },

        // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        async exportData() {
            try {
                await dataManager.exportData();
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
            } catch (error) {
                console.error('Error exporting data:', error);
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            }
        },

        // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        async importData() {
            try {
                const success = await dataManager.importData();
                if (success) {
                    await this.loadData();
                    this.calculate();
                    // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
                }
            } catch (error) {
                console.error('Error importing data:', error);
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            }
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        getAllAssetTypes() {
            return assetClasses.getAllAssetTypes();
        },

        // –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
        selectAsset(index) {
            this.selectedAssetIndex = index;
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∏ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        getAssetWeight(asset) {
            if (this.portfolio.totalValue === 0) return 0;
            return ((asset.value || 0) / this.portfolio.totalValue) * 100;
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        getRiskLevel(assetType) {
            const assetInfo = assetClasses.getAssetInfo(assetType);
            const levels = { low: '–ù–∏–∑–∫–∏–π', medium: '–°—Ä–µ–¥–Ω–∏–π', high: '–í—ã—Å–æ–∫–∏–π' };
            return levels[assetInfo?.riskLevel] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∏—Å–∫–∞
        getRiskClass(assetType) {
            const assetInfo = assetClasses.getAssetInfo(assetType);
            return assetInfo?.riskLevel || 'medium';
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        getLiquidityLevel(assetType) {
            const assetInfo = assetClasses.getAssetInfo(assetType);
            const levels = { low: '–ù–∏–∑–∫–∞—è', medium: '–°—Ä–µ–¥–Ω—è—è', high: '–í—ã—Å–æ–∫–∞—è' };
            return levels[assetInfo?.liquidity] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –¥–ª—è –±–µ–π–¥–∂–∞
        getRiskLevelText(riskLevel) {
            const levels = { low: '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫', medium: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫', high: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫' };
            return levels[riskLevel] || '–†–∏—Å–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        getLiquidityText(liquidity) {
            const levels = { low: '–ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å', medium: '–°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å', high: '–í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å' };
            return levels[liquidity] || '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è
        updateAssetValue(index, field, value) {
            if (this.portfolio.assets[index]) {
                this.portfolio.assets[index][field] = value;
                this.updatePortfolioValue();
                this.calculate();

                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
                if (this.activeTab === 'assets') {
                    this.calculateDetailedProjections();
                    this.updateAssetChart();
                }

                this.saveData();
            }
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º
        updateSettings(field, value) {
            this.settings[field] = value;

            // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–Ω—Ñ–ª—è—Ü–∏—è, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏
            if (field === 'inflation') {
                this.updateScenarioSettings();
            } else if (field === 'showRealValues') {
                // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
                this.updateCharts();
                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–æ–≤
                if (this.activeTab === 'assets') {
                    this.updateAssetChart();
                }
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (horizonYears) –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç
                this.calculate();
                this.updateCharts();
                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
                if (this.activeTab === 'assets') {
                    this.calculateDetailedProjections();
                    this.updateAssetChart();
                }
            }

            this.saveData();
        },

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        updateScenarioSettings() {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ assetClasses
            const allAssetTypes = assetClasses.getAllAssetTypes();

            // –û–±–Ω–æ–≤–ª—è–µ–º scenarios –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—Ö–æ—Ç—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º assetClasses)
            this.scenarios.returnRates = {};
            Object.entries(allAssetTypes).forEach(([assetType, assetInfo]) => {
                this.scenarios.returnRates[assetType] = {
                    pessimistic: this.settings.inflation + assetInfo.inflationAdjustment.pessimistic,
                    base: this.settings.inflation + assetInfo.inflationAdjustment.base,
                    optimistic: this.settings.inflation + assetInfo.inflationAdjustment.optimistic
                };
            });

            this.calculate();
            this.updateCharts();

            // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–∫—Ç–∏–≤–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
            if (this.activeTab === 'assets') {
                this.calculateDetailedProjections();
                this.updateAssetChart();
            }

            this.saveData();
        },

        // Tab –∏ Scenario —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        switchTab(tabName) {
            console.log('Switching to tab:', tabName);
            this.activeTab = tabName;

            if (tabName === 'assets') {
                this.calculateDetailedProjections();
                this.updateAssetChart();
            } else {
                this.updateCharts();
            }

            this.saveData();
        },

        selectScenario(scenario) {
            console.log('Selecting scenario:', scenario);
            this.selectedScenario = scenario;
            this.updateAssetChart();
            this.saveData();
        },

        calculateDetailedProjections() {
            console.log('Calculating detailed projections...');

            if (!this.portfolio.assets || this.portfolio.assets.length === 0) {
                console.log('No assets found, setting empty projections');
                this.detailedProjections = { assets: {}, liabilities: { pessimistic: [], base: [], optimistic: [] } };
                return;
            }

            try {
                if (typeof financialEngine.calculateDetailedProjections === 'function') {
                    this.detailedProjections = financialEngine.calculateDetailedProjections(
                        this.portfolio,
                        this.scenarios,
                        this.settings
                    );
                    console.log('Detailed projections calculated successfully. Assets:', Object.keys(this.detailedProjections.assets).length);
                } else {
                    console.error('calculateDetailedProjections method not found on financialEngine');
                    this.detailedProjections = { assets: {}, liabilities: { pessimistic: [], base: [], optimistic: [] } };
                }
            } catch (error) {
                console.error('Error calculating detailed projections:', error);
                this.detailedProjections = { assets: {}, liabilities: { pessimistic: [], base: [], optimistic: [] } };
            }
        },

        updateAssetChart() {
            console.log('Updating asset comparison chart...');
            this.$nextTick(() => {
                const chartElement = this.$refs.assetChart || document.querySelector('canvas[x-ref="assetChart"]');

                if (chartElement && this.detailedProjections.assets && Object.keys(this.detailedProjections.assets).length > 0) {
                    try {
                        if (typeof chartManager.createAssetComparisonChart === 'function') {
                            chartManager.createAssetComparisonChart(
                                chartElement,
                                this.detailedProjections,
                                this.selectedScenario,
                                this.settings,
                                this.portfolio
                            );
                            console.log('Asset chart updated successfully');
                        } else {
                            console.error('createAssetComparisonChart method not found on chartManager');
                        }
                    } catch (error) {
                        console.error('Error updating asset chart:', error);
                    }
                } else {
                    console.log('Missing requirements - chartElement:', !!chartElement, 'assets:', Object.keys(this.detailedProjections.assets || {}).length);
                }
            });
        },

        // Helper methods –¥–ª—è asset comparison table
        getAssetValueForYear(asset, scenario, year) {
            const data = asset[scenario];
            if (!data || !data[year]) return 0;
            return this.settings.showRealValues ? data[year].real : data[year].nominal;
        },

        getLiabilityValueForYear(year) {
            const data = this.detailedProjections.liabilities[this.selectedScenario];
            if (!data || !data[year]) return 0;
            return data[year].value;
        },

        getNetWorthForYear(year) {
            let totalAssets = 0;
            let totalLiabilities = 0;

            // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤—ã
            Object.values(this.detailedProjections.assets).forEach(asset => {
                totalAssets += this.getAssetValueForYear(asset, this.selectedScenario, year);
            });

            // –í—ã—á–∏—Ç–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            totalLiabilities = this.getLiabilityValueForYear(year);

            return totalAssets - totalLiabilities;
        },

        // Watchers –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        $watch: {
            'portfolio.assets': {
                handler() {
                    console.log('Assets watcher triggered, count:', this.portfolio.assets?.length);
                    this.updatePortfolioValue();
                    eventBus.emit('portfolio:changed', this.portfolio);
                },
                deep: true
            },

            'portfolio.liabilities': {
                handler() {
                    console.log('Liabilities watcher triggered, count:', this.portfolio.liabilities?.length);
                    this.updatePortfolioValue();
                    this.calculate();
                    this.updateCharts();
                    eventBus.emit('portfolio:changed', this.portfolio);
                },
                deep: true
            },

            'settings.inflation'() {
                this.updateScenarioSettings();
            },

            'settings.horizonYears'() {
                this.calculate();
                this.saveData();
            },

            'settings.showRealValues'() {
                this.updateCharts();
                this.saveData();
            },

        }
    };
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Alpine.js
window.finCalcApp = finCalcApp;